{"version":3,"sources":["components/card/card.js","components/cardlist/cardlist.js","components/searchBox/searchbox.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","cardlist","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAWeA,G,YARF,SAACC,GAAD,OACT,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEtB,6BAAKL,EAAMI,QAAQE,YCKZC,EARE,SAACP,GAAD,OACb,sBAAKC,UAAU,YAAf,UACKD,EAAMQ,SAASC,KAAI,SAAAL,GAAO,OAC3B,cAAC,EAAD,CAA2BA,QAASA,GAArBA,EAAQC,OAF3B,QCIWK,G,YANG,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACd,uBAAOX,UAAU,SAASY,KAAK,SAC3BF,YAAaA,EACbG,SAAUF,MCuCHG,E,kDAtCb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAdtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAY,IAJF,E,gEASM,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAASkB,S,+BAO/B,IAAD,EAE0BC,KAAKN,MAA9Bb,EAFD,EAECA,SAAUU,EAFX,EAEWA,YACZU,EAAmBpB,EAASqB,QAAO,SAAAzB,GAAO,OAC9CA,EAAQE,KAAKwB,cAAcC,SAASb,EAAYY,kBAElD,OACE,sBAAK7B,UAAU,MAAf,UACE,oBAAIA,UAAU,OAAd,8BACA,cAAC,EAAD,CAAWU,YAAY,iBACrBC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAjCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.e5cf749d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.css'\r\n\r\nconst Card = (props) => (\r\n    <div className=\"card-container\">\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}>\r\n        </img>\r\n        <h1>{props.monster.name}</h1>\r\n    </div>\r\n)\r\n\r\nexport default Card;","import React from 'react';\r\nimport './cardlist.css';\r\nimport Cardcomp from '../card/card';\r\n\r\nconst cardlist = (props) => (\r\n    <div className=\"card-list\">\r\n        {props.monsters.map(monster =>(\r\n        <Cardcomp key={monster.id} monster={monster}/>\r\n        ))};\r\n    </div>\r\n);\r\n\r\nexport default cardlist;","import React from 'react';\r\nimport './searchbox.css';\r\n\r\nconst SearchBox = ({placeholder,handleChange}) => (\r\n    <input className='search' type='search'\r\n        placeholder={placeholder}\r\n        onChange={handleChange}/>\r\n)\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\nimport Cardlist from './components/cardlist/cardlist';\nimport './App.css';\nimport SearchBox from './components/searchBox/searchbox';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField:''\n    }\n\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters:users}));\n  }\n\n  handleChange = e => {\n    this.setState({ searchField: e.target.value});\n  }\n\n  render() {\n\n    const { monsters, searchField} = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      );\n    return (\n      <div className=\"App\">\n        <h1 className='Head'>Monster Rolodex </h1>\n        <SearchBox placeholder='search monster' \n          handleChange={this.handleChange}\n        />\n        <Cardlist monsters={filteredMonsters}/>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}